#http://www.i8c.be/webmethods-integration-agent-aws-container-service/

#########NOTES
if you tag your local image as :latest, OCP won't find it

############3

cd /opt/softwareag/IntegrationServer/docker

./is_container.sh createLeanDockerfile -Dfile.name=IS_Agent_Dockerfile

#make sure docker daemon is running
#if running in root, then make sure to use sudo

sudo ./is_container.sh build -Dfile.name=IS_Agent_Dockerfile -Dimage.name=is_agent:100
#this was fast locally, but took about 9 mins on aws

#run container...optional if not pushing to OCP
sudo docker run -d -p 5557:5555 -p 9997:9999 is_agent:100 /sag/profiles/IS_default/bin/sagis100 console

#to save docker image to a tarball (optional)
docker save -o is_agent.tar is_agent:100

#you can now copy tarball to location (optional)
#after copy, push it to docker (optional)
cat is_agent.tar | docker import - is_agent:100
#if not root
cat is_agent.tar | sudo docker import - is_agent:100


#log into OCP? change IP..assumes there's a cluster up
oc login 18.216.24.237:8443 -u developer -p developer

#### run on ocp using run
#doesn't work
#oc new-app --docker-image="is_agent:100"
#how about
oc run is-agent --image=is_agent:100 --command -- /sag/profiles/IS_default/bin/sagis100 console

#with ports (still need 9997/9999...)
#oc run is-agent --image=is_agent:100 --expose=true --port=5555 --hostport=5557 --command -- /sag/profiles/IS_default/bin/sagis100 console
#need to find the right patch json to add 9999/9997 rather than using oc edit
#technically with create route you should be able to specify the source/target pport...look at the ticket monster dc config


#create service account (you can do  this before run the agent)
#this is to give the user priviledges to update
# add the service account to privileged
oc create serviceaccount useroot
oc adm policy add-scc-to-user anyuid -z useroot --as=system:admin

#### don't need the following
#if need port, need this
#oc adm policy add-scc-to-user privileged -z useroot --as=system:admin
# and this??
#oc adm policy add-scc-to-user hostaccess -z useroot --as=system:admin
#to remove
#  oc adm policy remove-scc-from-user privileged -z useroot --as=system:admin


#to check if it was added
#oc describe scc privileged --as=system:admin
oc describe scc anyuid --as=system:admin
#oc describe scc hostaccess --as=system:admin

#patch to the service (is there a way to do this via template??)..i think we can just copy final dc/is-agent via oc edit)
oc patch dc/is-agent  --patch '{"spec":{"template":{"spec":{"serviceAccountName": "useroot"}}}}'


# add ports
# this can be done via oc-edit or by this command
# this works also but use the one below
#oc patch dc/is-agent  --patch '{"spec":{"template":{"spec":{"containers": [  {"name": "is-agent",  "ports":[ {"containerPort": "5555","protocol": "TCP"},{"containerPort": "9999", "protocol": "TCP"}]}]}}}}'
#no need for tcp
oc patch dc/is-agent  --patch '{"spec":{"template":{"spec":{"containers": [  {"name": "is-agent",  "ports":[ {"containerPort": "5555"},{"containerPort": "9999"}]}]}}}}'

# create service
oc expose dc is-agent

#expose ports
oc expose service is-agent --name=5555 --port=5555
oc expose service is-agent --name=9999 --port=9999


#### with template just run command..# this requires service account
oc new-app  webmethods.yml --param SERVICE_ACCOUNT=useroot --param IMAGE_TAG=100 

#### run without creating a new service account
# create image
# if you change the permisisions in the file RUN chmod 777 -R /sag

#add the following code to the docker file before ports are exposed
ENV APP_ROOT=/sag
RUN chgrp -R 0 ${APP_ROOT} && chmod -R g=u ${APP_ROOT}

./is_container.sh build -Dfile.name=IS_Agent_Dockerfile_chmod -Dimage.name=is_agent:100 
#note the change of the agent

#follow rest of instructions but use is-agent:101
#and skip creation of service account

oc new-app  webmethods.yml --param IMAGE_TAG=101 


####using wrapper ## This is the easiest solution
cd /opt/softwareag/IntegrationServer/docker

# create base docker file
./is_container.sh createLeanDockerfile -Dfile.name=IS_Agent_Dockerfile
 ./is_container.sh build -Dfile.name=IS_Agent_Dockerfile -Dimage.name=is_agent:100

#apply wrapper, ensure that wrapper file is in folder
docker build --tag is_agent:100-wrapper -f IS_Agent_wrapper_Dockerfile .
#or
#./is_container.sh build -Dfile.name=IS_Agent_wrapper_Dockerfile -Dimage.name=is_agent:100-wrapper


#test docker
docker run -d -p 5557:5555 -p 9997:9999 --name=isagent is_agent:100-wrapper /sag/profiles/IS_default/bin/sagis100 console

#test the 5557 and 9997 port
docker stop isagent && docker rm isagent

#run in ocp..#not working because pod can't pull the image
oc new-app  webmethods.yml --param IMAGE_TAG=100-wrapper



#############past issues

#issue right now is there's an error with pulling the image
#tried putting the image to aws docker but it's getting errors
#when that's removed, then there's an error pulling the image

#once this works, need to figure out how to expose the ports..
#maybe this?
https://docs.openshift.com/container-platform/3.3/dev_guide/port_forwarding.html
#or maybe we could use expose route but specify the internal cpntainer ports?

#figure out how to transfer local image from machine to machine



oc patch dc/is-agent  --patch '{"spec":{"template":{"spec":{"serviceAccountName": "useroot"}}}}'
oc patch dc/is-agent  --patch '{"spec":{"template":{"spec":{"containers": [  {"name": "is-agent",  "ports":[ {"containerPort": "5555","protocol": "TCP"},{"containerPort": "9999", "protocol": "TCP"}]}]}}}}'


            "spec": {
                "containers": [
                    {
                        "name": "is-agent",
                        "image": "is_agent:100",
                        "command": [
                            "/sag/profiles/IS_default/bin/sagis100",
                            "console"
                        ],
                        "ports": [
                            {
                                "containerPort": 5555,
                                "protocol": "TCP"
                            },
                            {
                                "containerPort": 9999,
                                "protocol": "TCP"
                            }
                        ],


        name: is-agent
        ports:
        - containerPort: 5555
          protocol: TCP
        - containerPort: 9999
          protocol: TCP


